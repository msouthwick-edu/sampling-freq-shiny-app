shiny::runApp()
runApp()
runApp()
?selectInput
load("results-data.RData")
View(results.plot)
runApp()
load("outcome-data.RData")
View(outcome.plot)
outcome.plot |>
pivot_longer(
cols = c(5:11)
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
)
View(outcome.long)
runApp()
runApp()
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled")
View(outcome.long)
runApp()
library(DT)
runApp()
shiny::runApp()
install.packages("shiny")
install.packages("shinydashboard")
library(shinydashboard)
shiny::runApp()
runApp()
runApp()
runApp()
ghibli_palettes$MononokeMedium
runApp()
ghibli_palettes$MononokeDark
runApp()
runApp()
ghibli_palettes$MononokeLight
runApp()
ghibli_palettes$MononokeDark
runApp()
runApp()
runApp()
library(shiny) # app
library(shinydashboard) # will be nice for creating tabs (MC error, raw data tables, models fit, etc.)
library(tidyverse) # piping and ggplot
library(ghibli)
library(DT) # data tables
# data ####
load("results-data.RData")
load("outcome-data.RData")
View(results.plot)
runApp()
results.sampled <- results.plot |>
filter(data == "sampled")
results.dgp <- results.plot |>
filter(data == "dgp")
runApp()
View(results.sampled)
runApp()
ghibli_palettes$MononokeDark
ghibli_palettes$MononokeMedium
runApp()
runApp()
runApp()
runApp()
load("C:/Users/mbrow/Box/00_UCDavis/02_research/03_projects/2025_sampling-frequency/sampling-freq-shiny-app/outcome-data-arima.RData")
View(outcome.plot)
library(shiny) # app
library(shinydashboard) # will be nice for creating tabs (MC error, raw data tables, models fit, etc.)
library(tidyverse) # piping and ggplot
library(ghibli)
library(DT) #
load("outcome-data-arima.RData")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled")
View(outcome.long)
library(shiny) # app
library(shinydashboard) # will be nice for creating tabs (MC error, raw data tables, models fit, etc.)
library(tidyverse) # piping and ggplot
library(ghibli)
library(DT) # data tables
#naming --> slide 39 in week 9
#
# data ####
load("results-data-arima.RData")
load("outcome-data-arima.RData")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled")
load("results-data-arima.RData")
load("outcome-data-arima.RData")
results.sampled <- results.plot |>
filter(data == "sampled")
results.dgp <- results.plot |>
filter(data == "dgp")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled")
View(results.sampled)
load("results-data-arima.RData")
load("outcome-data-arima.RData")
results.sampled <- results.plot |>
filter(data == "sampled") |>
rename("ar-1" = "dt-ar (phi)")
results.dgp <- results.plot |>
filter(data == "dgp")|>
rename("ar-1" = "dt-ar (phi)")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
indicator == "dt-ar (phi)" ~ "ar-1",
.default = as.character
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
outcome.plot$indicator == "dt-ar (phi)" ~ "ar-1",
.default = as.character
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
outcome.plot$indicator == "dt-ar (phi)" ~ "ar-1",
.default = as.factor
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
indicator,
"dt-ar (phi)" ~ "ar-1",
.default = as.factor
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
outcome.plot$indicator,
"dt-ar (phi)" ~ "ar-1",
.default = as.factor
)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
case_match(
outcome.plot$indicator,
"dt-ar (phi)" ~ "ar-1",
.default = as.character
)
attributes(outcome.plot$indicator)
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
mutate(indicator = factor(indicator,
levels = c("ivar", "isd", "imean", "auto.cor", "dt-ar (phi)"),
labels = c("ivar", "isd", "imean", "auto.cor", "ar-1")))
runApp()
runApp()
load("results-data-arima.RData")
load("outcome-data-arima.RData")
load("results-data-arima.RData")
load("outcome-data-arima.RData")
results.sampled <- results.plot |>
filter(data == "sampled") |>
rename("ar" = "dt-ar (phi)")
results.dgp <- results.plot |>
filter(data == "dgp")|>
rename("ar" = "dt-ar (phi)")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
mutate(indicator = factor(indicator,
levels = c("ivar", "isd", "imean", "auto.cor", "dt-ar (phi)"),
labels = c("ivar", "isd", "imean", "auto.cor", "ar")))
runApp()
runApp()
runApp()
View(outcome.plot)
View(results.sampled)
View(results.plot)
results.plot <- results.plot |>
rename("ar" = "dt-ar (phi)")
ghibli_palettes$MononokeMedium
runApp()
runApp()
runApp()
shiny::runApp()
load("data\\results-data-arima.RData")
load("data\\outcome-data-arima.RData")
# could create a "source script" and call it in with source("file-name.R") and it will run all those packages!
library(shiny) # app
library(shinydashboard) # will be nice for creating tabs (MC error, raw data tables, models fit, etc.)
library(tidyverse) # piping and ggplot
library(ghibli)
library(DT) # data tables
#naming --> slide 39 in week 9
#
# data ####
load("data\\results-data-arima.RData")
load("data\\outcome-data-arima.RData")
results.plot <- results.plot |>
rename("ar" = "dt-ar (phi)")
outcome.long <- outcome.plot |>
pivot_longer(
cols = c(5:11)
) |>
filter(data == "sampled") |>
mutate(indicator = factor(indicator,
levels = c("ivar", "isd", "imean", "auto.cor", "dt-ar (phi)"),
labels = c("ivar", "isd", "imean", "auto.cor", "ar")))
runApp()
runApp()
runApp()
runApp()
runApp()
